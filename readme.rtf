{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww9000\viewh11200\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 Tube Route Finder - A program which finds and describes how to travel between underground stations. The program relies on an implementation of the floyd  algorithm. \
\
Compile and run TubeRouteFinder.java, which has the main method.\
\
Michael Detmold - 02/2011\
\
The data used here is based upon the "London Underground Geographic Maps/CSV" which is available at http://commons.wikimedia.org/wiki/London_Underground_geographic_maps/CSV#Line_definitions. The program could be used with other data, representative of a different subway network.\
\
The program requires three files which should be kept in the same folder (the source"root folder") as the source code. The data should be in alphabetical order.\
\
1. a file named "alltubestations.txt" Which contains a unique "key" value for a station, followed by the name of the station on a new line.\
2. A similarly formatted file named "lines.txt" Which contains a unique "key" value for each line, followed by the name of the line on a new line.\
3. A file named "lineDefinitions.txt". This is how the adjacency matrix is built. First there is the key value of a given station, on the next line is a key value of a station adjacent to the above station, and on the third line there is the key value of the line these stations are on. This patter is repeated so as to describe the whole network.}